# 生产环境 Docker Compose 覆盖文件
# 用于生产环境，不包含代码挂载，使用构建的镜像

version: '3.8'

services:
  # MySQL数据库 - 生产环境配置
  mysql:
    container_name: enterprise_mysql_prod
    ports:
      - "3306:3306"
    environment:
      # 生产环境数据库配置通过环境变量注入
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - enterprise_network
    # 生产环境资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # 后端API服务 - 生产环境配置
  backend:
    container_name: enterprise_backend_prod
    ports:
      - "8000:8000"
    environment:
      # 生产环境配置通过环境变量注入
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - LOG_LEVEL=INFO
      - LOG_FILE=logs/app_prod.log
      - WORKERS=${WORKERS:-8}  # 生产环境使用更多worker
    volumes:
      # 生产环境不挂载代码，使用构建的镜像
      - backend_prod_uploads:/app/uploads
      - backend_prod_logs:/app/logs
    networks:
      - enterprise_network
    # 生产环境资源限制
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    # 生产环境健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务 - 生产环境配置
  frontend:
    container_name: enterprise_frontend_prod
    ports:
      - "3000:80"
    environment:
      # 生产环境配置通过环境变量注入
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-企业官网}
    networks:
      - enterprise_network
    # 生产环境资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx反向代理 - 生产环境配置
  nginx:
    container_name: enterprise_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
    networks:
      - enterprise_network
    # 生产环境资源限制
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# 生产环境专用数据卷
volumes:
  mysql_prod_data:
    driver: local
  backend_prod_uploads:
    driver: local
  backend_prod_logs:
    driver: local
  nginx_prod_logs:
    driver: local