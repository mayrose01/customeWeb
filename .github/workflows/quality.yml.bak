name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 后端代码质量检查
  backend-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./enterprise-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest pytest-cov bandit safety

    - name: Code formatting check (Black)
      working-directory: ./enterprise-backend
      run: black --check --diff .

    - name: Import sorting check (isort)
      working-directory: ./enterprise-backend
      run: isort --check-only --diff .

    - name: Linting (Flake8)
      working-directory: ./enterprise-backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Type checking (MyPy)
      working-directory: ./enterprise-backend
      run: mypy app/ --ignore-missing-imports

    - name: Security check (Bandit)
      working-directory: ./enterprise-backend
      run: bandit -r app/ -f json -o bandit-report.json || true

    - name: Dependency security check (Safety)
      working-directory: ./enterprise-backend
      run: safety check --json --output safety-report.json || true

    - name: Run tests with coverage
      working-directory: ./enterprise-backend
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./enterprise-backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-security-reports
        path: |
          ./enterprise-backend/bandit-report.json
          ./enterprise-backend/safety-report.json

  # 前端代码质量检查
  frontend-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: enterprise-frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./enterprise-frontend
      run: npm ci

    - name: Linting (ESLint)
      working-directory: ./enterprise-frontend
      run: npm run lint

    - name: Type checking (TypeScript)
      working-directory: ./enterprise-frontend
      run: npm run type-check

    - name: Code formatting check (Prettier)
      working-directory: ./enterprise-frontend
      run: npm run format:check

    - name: Security audit
      working-directory: ./enterprise-frontend
      run: npm audit --audit-level=moderate

    - name: Run tests
      working-directory: ./enterprise-frontend
      run: npm test -- --coverage

    - name: Build check
      working-directory: ./enterprise-frontend
      run: npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./enterprise-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 代码质量门禁
  quality-gate:
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    if: always()
    
    steps:
    - name: Check quality gate
      run: |
        if [ "${{ needs.backend-quality.result }}" != "success" ] || [ "${{ needs.frontend-quality.result }}" != "success" ]; then
          echo "❌ Quality gate failed"
          echo "Backend quality: ${{ needs.backend-quality.result }}"
          echo "Frontend quality: ${{ needs.frontend-quality.result }}"
          exit 1
        else
          echo "✅ Quality gate passed"
        fi
