name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: enterprise-frontend/package-lock.json

    - name: Install Python dependencies
      working-directory: ./enterprise-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black pytest pytest-cov

    - name: Install Node.js dependencies
      working-directory: ./enterprise-frontend
      run: npm ci

    - name: Python code formatting check
      working-directory: ./enterprise-backend
      run: black --check .

    - name: Python linting
      working-directory: ./enterprise-backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Frontend linting
      working-directory: ./enterprise-frontend
      run: npm run lint

    - name: Run Python tests
      working-directory: ./enterprise-backend
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key

    - name: Run frontend tests
      working-directory: ./enterprise-frontend
      run: npm test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./enterprise-backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 构建Docker镜像
  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./enterprise-${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 安全扫描
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到测试环境
  deploy-test:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to test environment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.TEST_SERVER_HOST }}
        username: ${{ secrets.TEST_SERVER_USER }}
        key: ${{ secrets.TEST_SERVER_SSH_KEY }}
        script: |
          cd /var/www/enterprise
          git pull origin develop
          export ENVIRONMENT=testing
          export DATABASE_URL="${{ secrets.TEST_DATABASE_URL }}"
          export SECRET_KEY="${{ secrets.TEST_SECRET_KEY }}"
          ./deploy.sh test up

  # 部署到生产环境
  deploy-production:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /var/www/enterprise
          git pull origin main
          export ENVIRONMENT=production
          export DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}"
          export SECRET_KEY="${{ secrets.PROD_SECRET_KEY }}"
          export MYSQL_ROOT_PASSWORD="${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}"
          export MYSQL_PASSWORD="${{ secrets.PROD_MYSQL_PASSWORD }}"
          export VITE_API_BASE_URL="${{ secrets.PROD_VITE_API_BASE_URL }}"
          ./deploy.sh prod up
