services:
  # 开发环境MySQL数据库
  mysql_dev:
    image: mysql:8.0
    container_name: enterprise_mysql_dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: devpassword
      MYSQL_DATABASE: enterprise_dev
      MYSQL_USER: dev_user
      MYSQL_PASSWORD: dev_password
    ports:
      - "3308:3306"  # 使用不同端口避免冲突
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - enterprise_dev_network

  # 开发环境后端API服务
  backend_dev:
    build:
      context: ./enterprise-backend
      dockerfile: Dockerfile
    container_name: enterprise_backend_dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql://dev_user:dev_password@mysql_dev:3306/enterprise_dev
      - SECRET_KEY=dev-secret-key-2024
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:3001", "http://localhost:3002", "http://dev.yourdomain.com"]
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
      - UPLOAD_DIR=uploads_dev
      - MAX_FILE_SIZE=2097152
      - LOG_LEVEL=DEBUG
      - LOG_FILE=logs/app_dev.log
    ports:
      - "8002:8000"  # 使用不同端口避免冲突
    volumes:
      - ./enterprise-backend/uploads_dev:/app/uploads
      - ./enterprise-backend/logs:/app/logs
    depends_on:
      - mysql_dev
    networks:
      - enterprise_dev_network

  # 开发环境前端服务
  frontend_dev:
    build:
      context: ./enterprise-frontend
      dockerfile: Dockerfile
    container_name: enterprise_frontend_dev
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://dev.yourdomain.com:8002/api
    ports:
      - "3002:80"  # 使用不同端口避免冲突
    depends_on:
      - backend_dev
    networks:
      - enterprise_dev_network

  # 开发环境Nginx反向代理
  nginx_dev:
    image: nginx:alpine
    container_name: enterprise_nginx_dev
    restart: unless-stopped
    ports:
      - "8080:80"  # 开发环境端口
      - "8444:443"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend_dev
      - backend_dev
    networks:
      - enterprise_dev_network

volumes:
  mysql_dev_data:

networks:
  enterprise_dev_network:
    driver: bridge 