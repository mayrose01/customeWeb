version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: enterprise_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: enterprise_dev
      MYSQL_USER: enterprise_user
      MYSQL_PASSWORD: enterprise_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - enterprise_network

  # 后端API服务
  backend:
    build:
      context: ./enterprise-backend
      dockerfile: Dockerfile
    container_name: enterprise_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql://enterprise_user:enterprise_password@mysql:3306/enterprise_dev
      - SECRET_KEY=your-production-secret-key-here
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - CORS_ORIGINS=["http://localhost:3000", "https://yourdomain.com"]
    ports:
      - "8000:8000"
    volumes:
      - ./enterprise-backend/uploads:/app/uploads
      - ./enterprise-backend/logs:/app/logs
    depends_on:
      - mysql
    networks:
      - enterprise_network

  # 前端服务
  frontend:
    build:
      context: ./enterprise-frontend
      dockerfile: Dockerfile
    container_name: enterprise_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - enterprise_network

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: enterprise_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - enterprise_network

volumes:
  mysql_data:

networks:
  enterprise_network:
    driver: bridge 