# 企业官网基础 Docker Compose 配置
# 定义所有环境共有的服务结构，不包含环境特定配置

version: '3.8'

services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: enterprise_mysql
    restart: unless-stopped
    # 环境变量通过覆盖文件或环境变量注入
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-defaultpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-enterprise_db}
      MYSQL_USER: ${MYSQL_USER:-enterprise_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-defaultpassword}
    # 端口映射通过覆盖文件配置
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - enterprise_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # 后端API服务
  backend:
    build:
      context: ./enterprise-backend
      dockerfile: Dockerfile
    container_name: enterprise_backend
    restart: unless-stopped
    # 环境变量通过覆盖文件或环境变量注入
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      - UPLOAD_DIR=${UPLOAD_DIR:-uploads}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-2097152}
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS:-jpg,jpeg,png,gif,pdf,doc,docx}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=${LOG_FILE:-logs/app.log}
      - WORKERS=${WORKERS:-4}
    # 端口映射通过覆盖文件配置
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - enterprise_network

  # 前端服务
  frontend:
    build:
      context: ./enterprise-frontend
      dockerfile: Dockerfile
    container_name: enterprise_frontend
    restart: unless-stopped
    # 环境变量通过覆盖文件或环境变量注入
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-企业官网}
    # 端口映射通过覆盖文件配置
    depends_on:
      - backend
    networks:
      - enterprise_network

  # Nginx反向代理服务
  nginx:
    image: nginx:alpine
    container_name: enterprise_nginx
    restart: unless-stopped
    # 端口映射通过覆盖文件配置
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - enterprise_network

# 数据卷定义
volumes:
  mysql_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

# 网络定义
networks:
  enterprise_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 