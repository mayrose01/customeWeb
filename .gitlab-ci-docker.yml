# GitLab CI/CD 配置文件 - Docker版本
# 企业官网项目持续集成/持续部署（支持Docker环境）

stages:
  - test
  - build
  - deploy

variables:
  # 全局变量
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # 项目路径
  BACKEND_PATH: "enterprise-backend"
  FRONTEND_PATH: "enterprise-frontend"
  
  # Docker配置
  DOCKER_REGISTRY: "your-registry.com"  # 可选：私有镜像仓库
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA

# 缓存配置
cache:
  paths:
    - $FRONTEND_PATH/node_modules/
    - $BACKEND_PATH/venv/

# 测试阶段 - 使用Docker Compose
test:docker:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker --version
    - docker-compose --version
  script:
    # 启动测试环境
    - docker-compose -f docker-compose.test.yml up -d
    
    # 等待服务启动
    - sleep 30
    
    # 运行后端测试
    - docker exec enterprise_backend_test python -m pytest tests/ -v || true
    
    # 运行前端测试（如果有）
    - docker exec enterprise_frontend_test npm run test:unit || true
    
    # 健康检查
    - curl -f http://localhost:8001/api/health || exit 1
    - curl -f http://localhost:3001 || exit 1
    
    # 停止测试环境
    - docker-compose -f docker-compose.test.yml down
  artifacts:
    reports:
      junit: test-results.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# 构建阶段 - 构建Docker镜像
build:backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker --version
  script:
    - cd $BACKEND_PATH
    - docker build -t enterprise-backend:$DOCKER_IMAGE_TAG .
    - docker tag enterprise-backend:$DOCKER_IMAGE_TAG enterprise-backend:latest
    - echo "Backend Docker image built successfully"
  artifacts:
    paths:
      - $BACKEND_PATH/
    expire_in: 1 hour
  only:
    - main
    - develop

build:frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker --version
  script:
    - cd $FRONTEND_PATH
    - docker build -t enterprise-frontend:$DOCKER_IMAGE_TAG .
    - docker tag enterprise-frontend:$DOCKER_IMAGE_TAG enterprise-frontend:latest
    - echo "Frontend Docker image built successfully"
  artifacts:
    paths:
      - $FRONTEND_PATH/dist/
    expire_in: 1 hour
  only:
    - main
    - develop

# 部署阶段 - 开发环境（Docker）
deploy:dev:docker:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # 复制代码到服务器
    - rsync -avz --delete ./ $DEV_SSH_USER@$DEV_SSH_HOST:$DEV_PROJECT_PATH/
    
    # 在服务器上部署Docker环境
    - ssh $DEV_SSH_USER@$DEV_SSH_HOST "cd $DEV_PROJECT_PATH && docker-compose -f docker-compose.dev.yml down"
    - ssh $DEV_SSH_USER@$DEV_SSH_HOST "cd $DEV_PROJECT_PATH && docker-compose -f docker-compose.dev.yml build"
    - ssh $DEV_SSH_USER@$DEV_SSH_HOST "cd $DEV_PROJECT_PATH && docker-compose -f docker-compose.dev.yml up -d"
    
    # 健康检查
    - sleep 30
    - curl -f http://$DEV_SSH_HOST:8080/api/health || exit 1
  environment:
    name: development
    url: http://$DEV_SSH_HOST:8080
  only:
    - develop

# 部署阶段 - 测试环境（Docker）
deploy:test:docker:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # 复制代码到服务器
    - rsync -avz --delete ./ $TEST_SSH_USER@$TEST_SSH_HOST:$TEST_PROJECT_PATH/
    
    # 在服务器上部署Docker环境
    - ssh $TEST_SSH_USER@$TEST_SSH_HOST "cd $TEST_PROJECT_PATH && docker-compose -f docker-compose.test.yml down"
    - ssh $TEST_SSH_USER@$TEST_SSH_HOST "cd $TEST_PROJECT_PATH && docker-compose -f docker-compose.test.yml build"
    - ssh $TEST_SSH_USER@$TEST_SSH_HOST "cd $TEST_PROJECT_PATH && docker-compose -f docker-compose.test.yml up -d"
    
    # 健康检查
    - sleep 30
    - curl -f http://$TEST_SSH_HOST:8080/api/health || exit 1
  environment:
    name: testing
    url: http://$TEST_SSH_HOST:8080
  only:
    - develop

# 部署阶段 - 生产环境（Docker）
deploy:prod:docker:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # 备份数据库
    - ssh $PROD_SSH_USER@$PROD_SSH_HOST "docker exec enterprise_mysql_prod mysqldump -u $PROD_MYSQL_USER -p$PROD_MYSQL_PASSWORD $PROD_MYSQL_DATABASE > backup_$(date +%Y%m%d_%H%M%S).sql"
    
    # 复制代码到服务器
    - rsync -avz --delete ./ $PROD_SSH_USER@$PROD_SSH_HOST:$PROD_PROJECT_PATH/
    
    # 在服务器上部署Docker环境
    - ssh $PROD_SSH_USER@$PROD_SSH_HOST "cd $PROD_PROJECT_PATH && docker-compose -f docker-compose.prod.yml down"
    - ssh $PROD_SSH_USER@$PROD_SSH_HOST "cd $PROD_PROJECT_PATH && docker-compose -f docker-compose.prod.yml build"
    - ssh $PROD_SSH_USER@$PROD_SSH_HOST "cd $PROD_PROJECT_PATH && docker-compose -f docker-compose.prod.yml up -d"
    
    # 健康检查
    - sleep 30
    - curl -f https://$PROD_DOMAIN/api/health || exit 1
  environment:
    name: production
    url: https://$PROD_DOMAIN
  only:
    - main
  when: manual

# 数据库迁移（Docker环境）
migrate:docker:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # 在Docker容器中执行数据库迁移
    - ssh $PROD_SSH_USER@$PROD_SSH_HOST "cd $PROD_PROJECT_PATH && docker exec enterprise_backend_prod python -c 'from app.database import engine; from app.models import Base; Base.metadata.create_all(bind=engine); print(\"Database migration completed\")'"
  environment:
    name: production
  only:
    - main
  when: manual

# 安全扫描（Docker镜像）
security:scan:docker:
  stage: test
  image: aquasec/trivy:latest
  script:
    - trivy image enterprise-backend:latest --format json --output backend-security-report.json
    - trivy image enterprise-frontend:latest --format json --output frontend-security-report.json
  artifacts:
    reports:
      security: backend-security-report.json
      security: frontend-security-report.json
    expire_in: 1 week
  only:
    - main
  when: manual

# 性能测试（Docker环境）
performance:test:docker:
  stage: test
  image: grafana/k6:latest
  script:
    - k6 run --out json=performance-report.json performance-tests/load-test-docker.js
  artifacts:
    reports:
      performance: performance-report.json
    expire_in: 1 week
  only:
    - main
  when: manual

# 清理旧镜像
cleanup:docker:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # 清理7天前的Docker镜像
    - ssh $PROD_SSH_USER@$PROD_SSH_HOST "docker image prune -f --filter \"until=168h\""
    - ssh $PROD_SSH_USER@$PROD_SSH_HOST "docker system prune -f"
  environment:
    name: production
  only:
    - main
  when: manual 